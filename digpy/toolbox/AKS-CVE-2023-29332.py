import os,inspect,sys,json
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))))
import digapi

def check_for_cve_2023_29332(nodeImageVersion):
    """
    Vulnerable Ubuntu - older than 202308.01
    Vulnerable Windows - older than 20348.1906 
    """
    nodeImage = nodeImageVersion.split('-')
    nodeOs = nodeImage[0]
    nodeContainerVersion = nodeImage[1]
    nodeImageVersion = nodeImage[2]
    imageVersion = nodeImageVersion.split('.')
    imageMajor = imageVersion[0]

    if len(nodeImage) != 3:
        print('    Unknown nodeImageVersion format')
        print('    %s' % nodeImageVersion)
        return
    if not nodeOs.startswith('AKS'):
        print('    Unknown nodeImageVersion format')
        return
    
    print('    Found node OS: %s' % nodeOs)
    print('    Found node container version: %s' % nodeContainerVersion)
    print('    Found node image version: %s' % nodeImageVersion)
    print('    Checking if older than 202308.01')

    if imageMajor >= '202308':
        return '      Not Vulnerable to CVE-2023-29332'
    else:
        return '      Vulnerable to CVE-2023-29332'

api = digapi.DigApi()
clusters = api.get_inventory(filter='type = "Managed Cluster" and platform = "Azure"')['data']
for cluster in clusters:
    hash = cluster['hash']
    try: 
        resource = api.get_inventory_cloud_resource(resource_hash=hash)['data']
    except:
        print('Error getting resource for %s' % cluster['name'])
        continue
    name = resource['name']
    config = json.loads(resource['configuration'])
    nodeImageVersion = config['properties']['agentPoolProfiles'][0]['nodeImageVersion']

    print('Cluster name: %s' % name)
    print('  Node Image: %s' % nodeImageVersion)
    print(check_for_cve_2023_29332(nodeImageVersion))
    print('')
